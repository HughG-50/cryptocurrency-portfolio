Linking API Keys
    -What people used to do, and still can do this way is put all keys in .env 
    file. This is stored locally on machine.
    -To then deploy - e.g. on Heroku or AWS, you have to add all those keys to the .env
    of that server
        -this isn't ideal because as humans we forget to do stuff
    -credentials.yml.enc 
        -open it decrypted
            EDITOR=code --wait" rails credentials:edit
        -once exiting the file it saves and encrypts it 

    -yml 
        -form of markup language
        -key:value

    Three main options for using environment variables:
    http://railsapps.github.io/rails-environment-variables.html
        1. Set env variables on local machine 
            -set Unix env variables 
            -then e.g. in ~/.bashrc file add export GMAIL_USERNAME="myname@gmail.com"
        2. Use the Figaro Gem
            -gem 'figaro' --> bundle install 
            -use generator
                bundle exec figaro install 
            -generator creates config/application.yml file and adds to .gitignore
            -can add environment variables as key/value pairs to config/application.yml
            -use like ENV["GMAIL_USERNAME"]
            -variables in the config/application.yml will override environment variables est in the Unix shell
        3. Use local_env.yml file (more manual way of doing option 2)
            -create a config/local_env.yml file
            -set .gitignore /config/local_env.yml
            -find this line of code in the config/application.rb file 
            
            # Version of your assets, change this if you want to expire all your assets
                config.assets.version = '1.0'
            
            -i.e. in Rails 5.2.4.2 that line looks like this
            
            class Application < Rails::Application
            # Initialize configuration defaults for originally generated Rails version.
                config.load_defaults 5.2

            -And then add the following to the config/application.rb file
            
            config.before_configuration do
                env_file = File.join(Rails.root, 'config', 'local_env.yml')
                YAML.load(File.open(env_file)).each do |key, value|
                    ENV[key.to_s] = value
                end if File.exists?(env_file)
            end


**Remember to always run bundle install once you've made a new Rails app
Webpack
    -Gem that allows us to use React with Rails

Create new database
    -rails db:create

Creating our data model
    -all we need for now is a currency model with some attributes for each cryptocurrency
    -adding all fields for what we are going to need in the database
        -name
        -description
        -maxsupply
        -currency_symbol
        **May need a field for storing icons/logos of the currency?
    rails g model Currency name description maxsupply:bigint currency_symbol slug
        -slug is a thing that lets us have more user friendly/readable/SEO friendly URLs

What is a database migration?
    -Database migration tack granular changes to your database schema
        Database Schema 
            -the logical configuration of all or part of a relational database
            -i.e. indicates how entities that make up the database relate to one another
                -including tables, views, stored procedures and more
            -i.e. defines standard format that our database will appear as
    -basically allows us to have git like rollback capability when we make schema changes

    rake db:migrate or rails db:migrate
        -updated/made our Currency table in our database 

    Rollback to fix a mistake
        rails db:rollback

Database seed file 
    -This file should contain all the record creation needed to seed the database with its default values.
    -The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).

    rails db:seed

Looking at app through console
    rails c 


Currency Controller
    Root path
        -root path is essentially where everything is stored
        -base root where everything else is derived from 

        root 'currencies#index'
        -sets the root path to our Currency index page

    rake routes
        -tells us what all of our routes are

Linking React - hello_react.jsx
    -All files in the new app/javascript/packs directory are compiled by Webpack.
    There’s one example React file hello_react.jsx, which defines a simple functional React component called Hello 
    that can display the words “Hello React!” on a page. 
    It can also take a prop called name to display it instead of the word “React”.

    -We can use this component on any page by linking it with the javascript_pack_tag helper method.

        -Run this example by adding <%= javascript_pack_tag 'hello_react' %> to the head of your layout file,
        like app/views/layouts/application.html.erb. All it does is render <div>Hello React</div> at the bottom
        of the page.

    -->put in root path (index.html.erb in views) - entry point to inject React into our Rails app

Wildcard search
    -a wildcard is a character than can be substituted for zero or more characters in a string 
    -commonly used for database SQl search queries
    -an asterisk *, may be used to specify any number of characters - typically used at the end of a root word 
        -e.g. educat* --> educate, educated, education, educational, educator 
    -a question mark ?, may be used to represent a single character, anywhere in the word
        -useful for when there are variable spellings for a word, and you want to search for all variants at once
        -e.g. colo?r would return both color and colour

Conditional assignment operator  a ||= b 
    -if a is undefined or falsey(truthy and falsey is when in Ruby, JS, Python etc we are evaluating non-boolean things like a boolean) 
    then b is not evaluated and no assignment takes place
    -is equivalent to the following:
        a ? a : a = b
        if a then a else a = b end

Hash syntax 
    -remember that {"name" => name} is equivalent to {name: name}